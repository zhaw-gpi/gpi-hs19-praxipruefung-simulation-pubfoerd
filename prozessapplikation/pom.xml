<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">  
  <!-- Version von Maven -->  
  <modelVersion>4.0.0</modelVersion>  

  <!-- Grundangaben zum Maven-Projekt -->  
  <groupId>ch.zhaw.gpi</groupId>  
  <artifactId>prozessapplikation</artifactId>
  <version>1.0.0</version>  
  
  <!-- Konfiguration des Maven-Projekts -->  
  <properties> 
    <!-- Nicht bloss ANSI, sondern UTF-8 soll unterstützt sein -->  
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>  
    <!-- Setzt die (Camunda) Spring Boot-Starter-Version -->  
    <camunda-bpm-spring-boot-starter.version>3.3.4</camunda-bpm-spring-boot-starter.version>  
    <spring.boot.version>2.1.8.RELEASE</spring.boot.version>  
    <!-- Steuert, ob die Enterprise-Version von Camunda benutzt wird ("-ee" schreiben)
             oder die Community-Version (leer lassen). Weitere Bedingungen:
             1. Eine Datei license.txt mit einem gültigen Key muss im Benutzerverzeichnis/.camunda sein
             2. Es sind Credentials zum Camunda-EE-Repository erforderlich (siehe ganz unten) -->  
    <camunda.enable.ee>-ee</camunda.enable.ee>  
    <!-- True, falls keine Tests erforderlich sind (Beschleunigt/Ermöglicht Start auch bei fehlgeschlagenen Tests) -->  
    <skipTests>false</skipTests> 
  </properties>  
  
  <!-- Setzt Spring Boot als massgebend für die Verwaltung der Abhängigkeiten in Maven -->  
  <dependencyManagement> 
    <dependencies> 
      <dependency> 
        <groupId>org.springframework.boot</groupId>  
        <artifactId>spring-boot-dependencies</artifactId>  
        <version>${spring.boot.version}</version>  
        <type>pom</type>  
        <scope>import</scope> 
      </dependency> 
    </dependencies> 
  </dependencyManagement>  
  
  <!-- Legt die einzelnen Abhängigkeiten des Maven-Projekts fest -->  
  <dependencies> 
    <!-- Importiert eine für die Spring Boot-Umgebung konfigurierte Camunda-
        Umgebung, beinhaltend: Spring-Framework, Tomcat-Server, Camunda Process
        Engine, Camunda Webapps (Tasklist, Cockpit, Admin), Camunda Spin -->  
    <dependency> 
      <groupId>org.camunda.bpm.springboot</groupId>  
      <artifactId>camunda-bpm-spring-boot-starter-webapp${camunda.enable.ee}</artifactId>  
      <version>${camunda-bpm-spring-boot-starter.version}</version> 
    </dependency>  
    <!-- Importiert die REST API als weiterer Zugang fürr die Camunda Process Engine -->  
    <dependency> 
      <groupId>org.camunda.bpm.springboot</groupId>  
      <artifactId>camunda-bpm-spring-boot-starter-rest</artifactId>  
      <version>${camunda-bpm-spring-boot-starter.version}</version> 
    </dependency>  
    <!-- Importiert die Unterstützung für JUnit-Tests allgemein und Camunda-spezifisch (BPM Assert) -->  
    <dependency> 
      <groupId>org.camunda.bpm.springboot</groupId>  
      <artifactId>camunda-bpm-spring-boot-starter-test</artifactId>  
      <version>${camunda-bpm-spring-boot-starter.version}</version>  
      <scope>test</scope> 
    </dependency>  
    <!-- Importiert die H2-Datenbank-Abhängigkeit, damit die Camunda Process
        Engine ihre Daten in H2 in-memory ablegen kann -->  
    <dependency> 
      <groupId>com.h2database</groupId>  
      <artifactId>h2</artifactId>  
      <scope>runtime</scope> 
    </dependency>  
    <!-- Import die JDBC-Unterstützung für Spring Boot, damit H2 auch 
        file-basiert sein kann -->  
    <dependency> 
      <groupId>org.springframework.boot</groupId>  
      <artifactId>spring-boot-starter-jdbc</artifactId> 
    </dependency>  
    <!-- Importiert die Mail-Unterstützung für Spring Boot-Projekte -->  
    <dependency> 
      <groupId>org.springframework.boot</groupId>  
      <artifactId>spring-boot-starter-mail</artifactId> 
    </dependency>  
    <!-- In OpenJDK ist die folgende für die XML-Verarbeitung erforderliche 
            Bibliothek nicht mehr standardmässig dabei -->  
    <dependency> 
      <groupId>com.sun.xml.bind</groupId>  
      <artifactId>jaxb-impl</artifactId>  
      <version>2.2.3</version> 
    </dependency> 

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
  </dependencies>

  <!-- Konfiguration des Build-Prozesses -->
  <build> 
    <plugins> 
      <!-- The Spring Boot Maven Plugin provides Spring Boot support in Maven, 
            allowing you to package executable jar or war archives and run an application in-place -->  
      <plugin> 
        <groupId>org.springframework.boot</groupId>  
        <artifactId>spring-boot-maven-plugin</artifactId>  
        <version>${spring.boot.version}</version>  
        <configuration> 
          <layout>ZIP</layout> 
        </configuration>  
        <executions> 
          <execution> 
            <goals> 
              <goal>repackage</goal> 
            </goals> 
          </execution> 
        </executions> 
      </plugin>  
      <!-- Ohne die folgende Angaben versucht Maven mit JDK 5 zu kompilieren -->  
      <plugin> 
        <artifactId>maven-compiler-plugin</artifactId>  
        <version>3.8.1</version>  
        <configuration> 
          <source>11</source>  
          <target>11</target> 
        </configuration> 
      </plugin> 
    </plugins> 
  </build>  

  <!-- Damit auch die neuesten Patches der Camunda-Komponenten verfügbar sind, sollen
         die Komponenten nicht vom allgemeinen Maven-Repository https://mvnrepository.com
         geladen werden, sondern von den bei Camunda gehosteten Nexus-Repositories.
         Diese gibt es einerseits für die Community Edition (camunda-bpm-nexus) und
         für die Enterprise Edition (camunda-bpm-ee). Die Community Repository funktioniert
         out-of-the-box, da öffentlich zugänglich.

         Die Enterprise Repository benötigt hingegen Zugangsdaten, welche in einer Datei 
         settings.xml im .m2-Verzeichnis eingefügt werden. 
    -->  
  <repositories> 
    <repository> 
      <id>camunda-bpm-nexus</id>  
      <name>camunda-bpm-nexus</name>  
      <url>https://app.camunda.com/nexus/content/groups/public</url> 
    </repository>  
    <repository> 
      <id>camunda-bpm-ee</id>  
      <name>camunda-bpm-ee</name>  
      <url>https://app.camunda.com/nexus/content/repositories/camunda-bpm-ee</url> 
    </repository> 
  </repositories> 
</project>
